# name: Databricks job migration

# on:
#   workflow_dispatch:
#     inputs:
#       source_env:
#         type: choice
#         description: "Select source environment"
#         required: true
#         options:
#         - Dev
#         - Test
#         - Prod
#       target_env:
#         description: "Select target environment"
#         required: true
#         type: choice
#         options: ["Dev", "Test", "Prod"]
        
# jobs:
#   databricks_migration:
#     runs-on: ubuntu-latest

#     env:
#       SOURCE_ENV: ${{ github.event.inputs.source_env }}
#       TARGET_ENV: ${{ github.event.inputs.target_env }}
#       JOB_ID: ${{ github.event.inputs.job_id }}
#       DATABRICKS_API_TOKEN: ${{secrets.DATABRICKS_API_TOKEN}}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
        
#       - name: Setup Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.9

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install requests
  
#       - name: Call Databricks API
#         run: |
#           python .github/workflows/apicall.py

      
#       - name: Select Databricks Job ID
#         run: |
#           # Python script to prompt the user to select a job ID and list its details
#           python .github/workflows/select_job_id.py

name: Databricks Job Migration

on:
  workflow_dispatch:
    inputs:
      source_env:
        type: choice
        description: "Select source environment"
        required: true
        options:
        - Dev
        - Test
        - Prod
      target_env:
        description: "Select target environment"
        required: true
        type: choice
        options: ["Dev", "Test", "Prod"]
      job_id:
        description: "Enter the Databricks Job ID"
        required: true

jobs:
  databricks_migration:
    runs-on: ubuntu-latest

    env:
      SOURCE_ENV: ${{ github.event.inputs.source_env }}
      TARGET_ENV: ${{ github.event.inputs.target_env }}
      JOB_ID: ${{ github.event.inputs.job_id }}
      DATABRICKS_API_TOKEN: ${{ secrets.DATABRICKS_API_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests
  
      - name: Call Databricks API and Publish Artifacts
        run: |
         python .github/workflows/apicall.py > api_response.json
         artifacts:
          name: databricks-api-response
          path: api_response.json

      - name: Download and Process API Response
        uses: actions/download-artifact@v2
        with:
          name: databricks-api-response
          path: api_response.json

      - name: Fetch Job IDs and Details
        run: |

          with open('api_response.json', 'r') as file:
          response_data = json.load(file)
          job_ids = response_data['job_ids']

    for job_id in job_ids:

        python_script = f"""
        import requests

        databricks_api_token = ""

        url = "https://sagerx-aws-devtest-comm.cloud.databricks.com/api/2.1/jobs/get?job_id={job_id}"

        payload = {{}}
        headers = {
          'Authorization': f'Bearer dapic100eda776087528cd6a82f7ca84914a'
        }

        response = requests.request("GET", url, headers=headers, data=payload)

        print(response.text)
        """

        # Create a temporary Python script file
        with open('fetch_job_details.py', 'w') as script_file:
            script_file.write(python_script)

        # Execute the temporary script to fetch job details
        python fetch_job_details.py
  continue-on-error: true  # Continue with the workflow even if a job detail fetch fails


      - name: Select Databricks Job ID
        run: |
          # Python script to prompt the user to select a job ID and list its details
          python .github/workflows/select_job_id.py







